# -*- coding: utf-8 -*-
"""S-T-Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AzAz2_YqVmGGORQ5hc1L8fxskvIGIYoU
"""
### Input file should be present in the same folder as code

import speech_recognition as sr 
import os
from pydub import AudioSegment
from pydub.silence import split_on_silence
import moviepy.editor as mp

"""-----------------------------------------------------------------------"""

# Input
filename = input("Enter your filename.\n")

def convert_to_wav(fname):
  # split filename to get extension
  split  = os.path.splitext(fname)
  file_name = split[0]
  file_extension = split[1]
  print(file_extension)
  input_file = fname
  output_file = "result.wav"
  # convert mp3,mp4 to wav
  if file_extension == '.wav':
    output_file = fname
    print("File already in .wav format")

  elif file_extension == '.mp3':
    sound = AudioSegment.from_mp3(input_file)
    output_file = fname.replace("mp3","wav") 
    sound.export(output_file, format="wav")
    print("Coverted .mp3 to .wav")

  elif file_extension == '.mp4':
    clip = mp.VideoFileClip(input_file) 
    output_file = fname.replace("mp4","wav")
    clip.audio.write_audiofile(output_file)
    print("Converted .mp4 to .wav")

  else:
    import subprocess
    subprocess.call(['ffmpeg', '-i', fname, output_file])  

  return output_file

# importing libraries 
import speech_recognition as sr 
import os 
from pydub import AudioSegment
from pydub.silence import split_on_silence

# create a speech recognition object
r = sr.Recognizer()

# a function that splits the audio file into chunks
# and applies speech recognition
def get_large_audio_transcription(path):
    """
    Splitting the large audio file into chunks
    and apply speech recognition on each of these chunks
    """
    # open the audio file using pydub
    sound = AudioSegment.from_wav(path)  
    # split audio sound where silence is 700 miliseconds or more and get chunks
    chunks = split_on_silence(sound,
        # experiment with this value for your target audio file
        min_silence_len = 500,
        # adjust this per requirement
        silence_thresh = sound.dBFS-14,
        # keep the silence for 1 second, adjustable as well
        keep_silence=500,
    )
    folder_name = "audio-chunks1"
    # create a directory to store the audio chunks
    if not os.path.isdir(folder_name):
        os.mkdir(folder_name)
    whole_text = ""
    # process each chunk 
    for i, audio_chunk in enumerate(chunks, start=1):
        # export audio chunk and save it in
        # the `folder_name` directory.
        chunk_filename = os.path.join(folder_name, f"chunk{i}.wav")
        audio_chunk.export(chunk_filename, format="wav")
        # recognize the chunk
        with sr.AudioFile(chunk_filename) as source:
            audio_listened = r.record(source)
            # try converting it to text
            try:
                text = r.recognize_google(audio_listened)
            except sr.UnknownValueError as e:
                print("Error:", str(e))
            else:
                text = f"{text.capitalize()}. "
                #print(chunk_filename, ":", text)
                whole_text += text
    # return the text for all chunks detected
    return whole_text

op = convert_to_wav(filename)
path = op
full_txt = get_large_audio_transcription(path)
print(full_txt)
#print("\nFull text:", get_large_audio_transcription(path))

full_txt